<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ysebastien.me - articles</title><link href="http://ysebastien.me/" rel="alternate"></link><link href="http://ysebastien.me/feeds/articles.atom.xml" rel="self"></link><id>http://ysebastien.me/</id><updated>2018-01-10T22:55:00-08:00</updated><entry><title>Using python and wget to download the entire comedy bang bang archive to-date</title><link href="http://ysebastien.me/using-python-and-wget-to-download-the-entire-comedy-bang-bang-archive-to-date.html" rel="alternate"></link><published>2018-01-10T18:09:00-08:00</published><updated>2018-01-10T22:55:00-08:00</updated><author><name>Yann-Sebastien</name></author><id>tag:ysebastien.me,2018-01-10:/using-python-and-wget-to-download-the-entire-comedy-bang-bang-archive-to-date.html</id><summary type="html">&lt;p&gt;Use a free Howl premium trial to find find the download links for all the comedy bang bang podcast episodes, wget to download them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love &lt;a href="http://www.earwolf.com/show/comedy-bang-bang/"&gt;Comedy Bang Bang!&lt;/a&gt; so much, it's gotten me through some unhappy times.  Unfortunately all but
the past 6 months or so of episodes are archived behind a paywall. Supporting Earwolf and the
comedians that provide literally countless hours of free content is something I am in fact very
much in support of. But one day there is the chance I want to revisit a very old episode but the
hosting service has shutdown or just life has happened and there isn't a reliable way of accessing
all the old archives anymore.&lt;/p&gt;
&lt;p&gt;So I did slightly unethical thing. I signed up for a free trial of howl premium (which I've had
before) and went to the Howl archive url and did little digging with chrome dev tools. Initially I
had assumed I would be able to right click the rendered episodes and find the mp3 url from there,
but they had hid it away a little bit. From the source I was able to find the episode-table id
whose elements contained a tags with a data-stream-url attribute. These data-stream-url links
were to s3.aws servers and had the mp3 filename directly in the url! Some quick curl on a few
different of these urls proved that they were indeed the podcast audio files.&lt;/p&gt;
&lt;p&gt;To quickly scrape all these urls I used &lt;a href="https://pypi.python.org/pypi/beautifulsoup4"&gt;BeautifulSoup&lt;/a&gt; on the source file I saved.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Comedy Bang Bang_ The Podcast - Howl.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-stream-url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# a also contains many None entries for all a tags without data-stream-url attribute&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cbb-archive-urls.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It turns out wget is quite feature rich and can be &lt;a href="https://www.gnu.org/software/wget/manual/wget.html"&gt;configured quite a bit&lt;/a&gt;. wget handles an input file of urls sequentially, with the additional arguments helping to make sure the queue can be resumed, doesn't abuse their hosting server too much, and doesn't eat up all my bandwidth.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget --limit-rate&lt;span class="o"&gt;=&lt;/span&gt;1000k -c -t &lt;span class="m"&gt;10&lt;/span&gt; --wait &lt;span class="m"&gt;12&lt;/span&gt; --random-wait -i /mnt/c/Users/ysebastien/Downloads/cbb-archive-urls.txt
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="comedy"></category></entry><entry><title>A sudoku solver in Flask</title><link href="http://ysebastien.me/a-sudoku-solver-in-flask.html" rel="alternate"></link><published>2017-11-05T00:00:00-07:00</published><updated>2018-01-10T17:43:00-08:00</updated><author><name>Yann-Sebastien</name></author><id>tag:ysebastien.me,2017-11-05:/a-sudoku-solver-in-flask.html</id><summary type="html">&lt;p&gt;I wrote a small flask app hosted on Heroku using old code I had written a few years ago.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The idea&lt;/h1&gt;
&lt;p&gt;I've always wanted to learn how to use &lt;a href="" title="http://flask.pocoo.org/docs/0.12/"&gt;Flask&lt;/a&gt; properly. I've never gotten through a flask tutorial that has an example app, so I decided to adapt a &lt;a href="" title="https://github.com/underchemist/sudopy"&gt;sudoku solving library&lt;/a&gt; I made quite awhile ago. Although I tried being super smart when I wrote this and tried to implement a version of Donald Knuth's &lt;a href="" title="https://en.wikipedia.org/wiki/Dancing_Links"&gt;dancing links&lt;/a&gt; I ended up only writing a backtracking algorithm. I figured this is still good enough to solve most inputs within a couple of seconds and that's fine for my purposes.&lt;/p&gt;
&lt;h1&gt;Result&lt;/h1&gt;
&lt;p&gt;I learned a lot about HTML, CSS, bootstrap, and even jquery. It's 2017 but for a long time I thought I was too high brow for web development and never bothered to learn it (Recently dropping out of my graduate degree has made me rethink some things).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gyazo.com/3a651c8d3caea847cc792da48f0475d5"&gt;&lt;img alt="https://gyazo.com/3a651c8d3caea847cc792da48f0475d5" src="https://i.gyazo.com/3a651c8d3caea847cc792da48f0475d5.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is look so far of the app.&lt;/p&gt;
&lt;p&gt;Starting out I didn't really know how to make anything look nice so I actually went to the site for &lt;a href="https://gabrielecirulli.github.io/2048/"&gt;2048&lt;/a&gt; and copied a lot of the CSS and HTML structure.
Like as in the sudoku grid cells are just smaller and have different padding rules to be 9x9 instead of 4x4. At this point nothing was functional on the site, there weren't even any buttons, it was literally just a title and non-functional sudoku grid.&lt;/p&gt;
&lt;p&gt;I learned a bit more about forms and also added bootstrap templating so buttons didn't look terrible. Then I had to figure out how send data through forms to run it through my solver and spit it back out through another rendered template. I wasn't sure how all the input boxes in my form would come together through a &lt;code&gt;request.form&lt;/code&gt; call, but after some testing the response was a &lt;code&gt;Dict&lt;/code&gt; with the keys being the name attribute of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags in the form element and the values the whatever was in the input cells. With a bit of massaging it was easy to convert this into something readable by sudopy.&lt;/p&gt;
&lt;p&gt;At this point I wanted to add convenience functionality, so I had to learn some javascript/jquery. To input a puzzle you had to click one of the squares, tab to the next one, and so on until you tabbed 9 * 9 = 81 times. I wanted to add the ability to paste specially formatted strings directly into the puzzle grid, have the input cursor auto-focus to the next square, and clear any inputs from the grid.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gyazo.com/eab89821a22161aa92bb295c972934df"&gt;&lt;img alt="https://gyazo.com/eab89821a22161aa92bb295c972934df" src="https://i.gyazo.com/eab89821a22161aa92bb295c972934df.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gyazo.com/0eb1568cbfcd9cbb9083cf366da307d8"&gt;&lt;img alt="https://gyazo.com/0eb1568cbfcd9cbb9083cf366da307d8" src="https://i.gyazo.com/0eb1568cbfcd9cbb9083cf366da307d8.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gyazo.com/884cd67fca8bbafdb7af26b01ba91782"&gt;&lt;img alt="https://gyazo.com/884cd67fca8bbafdb7af26b01ba91782" src="https://i.gyazo.com/884cd67fca8bbafdb7af26b01ba91782.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The hardest thing to learn was that in order for the scripts to run properly they required all the DOM elements to be loaded first. It took me so long to figure out I need to wrap my functions in &lt;code&gt;document.ready&lt;/code&gt; calls.&lt;/p&gt;
&lt;p&gt;Adding a footer was a little challenging for me, but mainly because I don't know how to match colors. I ended up on purple because it seemed good to me but I can see how it might not be for everyone. Testing how the site looked at this point on my desktop and laptop made my realize somethings were broken on a smaller screen. I had to fiddle a lot with the CSS and create some new div class containers but I think now it works all right.&lt;/p&gt;
&lt;p&gt;The final touch was adding a fade in animation with css and keyframes. I wanted to do for page loads but I ended up just doing it for the solved puzzle text and back button on page load. Since everything else in the page is pretty static it works quite well. That's it, the final project app file structure is down below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/
│   .gitattributes
│   .gitignore
│   environment.yml
│   Flask-sudoku-app.sublime-project
│   Flask-sudoku-app.sublime-workspace
│   local_config.py
│   Procfile
│   README.md
│   requirements.txt
│   run.py
│
├───app
│   │   sudopy.py
│   │   views.py
│   │   __init__.py
│   │
│   ├───static
│   │       bootstrap-social.css
│   │       clear.js
│   │       favicon.ico
│   │       mappaste.js
│   │       nextinput.js
│   │       styles.css
│   │
│   ├───templates
│   │       base.html
│   │       index.html
│   │       solution.html
│   │
│   └───__pycache__
│           sudopy.cpython-36.pyc
│           views.cpython-36.pyc
│           __init__.cpython-36.pyc
│
└───__pycache__
        local_config.cpython-36.pyc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://sudoku-solver.herokuapp.com/"&gt;You can try it out for yourself!&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Nanonispy: My fist python package</title><link href="http://ysebastien.me/nanonispy-my-first-python-package.html" rel="alternate"></link><published>2015-12-28T14:33:00-08:00</published><updated>2015-12-28T14:33:00-08:00</updated><author><name>Yann-Sebastien</name></author><id>tag:ysebastien.me,2015-12-28:/nanonispy-my-first-python-package.html</id><summary type="html">&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;nanonispy&lt;/tt&gt; is a small library written in python 3. It came about by needing to do some quasiparticle interference (QPI) analysis on STM grids. Nanonis saves the data in binary files, which need to be unpacked into &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; arrays for further processing. I had written a version of this that was a bit more hardcoded with the analysis code so I decided to try and refactor this into a more general library, and get some experience making a nice clean python library. I don't know if I've achieved that but that's why you practice. The code is unit tested, with ~ 100% coverage although I don't know that the tests are all that good. However it does mean that should you need to change things for your needs, it should be relatively easy to troubleshoot if errors do come up.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://travis-ci.org/underchemist/nanonispy"&gt;&lt;img alt="Build Status" src="https://travis-ci.org/underchemist/nanonispy.svg?branch=master" /&gt;&lt;/a&gt;  &lt;a class="reference external" href="https://coveralls.io/github/underchemist/nanonispy?branch=master"&gt;&lt;img alt="Coverage Status" src="https://coveralls.io/repos/underchemist/nanonispy/badge.svg?branch=master&amp;amp;service=github" /&gt;&lt;/a&gt;  &lt;a class="reference external" href="https://anaconda.org/underchemist/nanonispy/badges/installer/conda.svg"&gt;&lt;object data="https://anaconda.org/underchemist/nanonispy/badges/installer/conda.svg" type="image/svg+xml"&gt;Install with conda&lt;/object&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First of all this will be only of use to those that use an STM with a Nanonis hardware/software. Also since this is a python package, you should probably be using python for data analysis.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nanonispy&lt;/code&gt; is a small library written in python 3. It came about by needing to do some quasiparticle interference (QPI) analysis on STM grids. Nanonis saves the data in binary files, which need to be unpacked into &lt;code&gt;numpy&lt;/code&gt; arrays for further processing. I had written a version of this that was a bit more hardcoded with the analysis code so I decided to try and refactor this into a more general library, and get some experience making a nice clean python library. I don't know if I've achieved that but that's why you practice. The code is unit tested, with ~ 100% coverage although I don't know that the tests are all that good. However it does mean that should you need to change things for your needs, it should be relatively easy to troubleshoot if errors do come up.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="things-it-can-do"&gt;
&lt;h2&gt;Things it can do&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read Nanonis generated grid, scan, or point spectroscopy files ('.3ds', '.sxm', and '.dat' files, respectively).&lt;/li&gt;
&lt;li&gt;Parse the header for each file and store each entry into a dict for easy retrieval during post-processing.&lt;/li&gt;
&lt;li&gt;Read the binary data in, appropriately shaped, for each channel into &lt;code&gt;numpy&lt;/code&gt; arrays.&lt;/li&gt;
&lt;li&gt;Since each channel is just a numpy array, you're able to save each in a '.npy' binary format for easy figure generation after some post-processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="things-it-cannot-do"&gt;
&lt;h2&gt;Things it cannot do&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Handle incomplete or non-square datasets.&lt;/li&gt;
&lt;li&gt;Apply image correction techniques like flattening.&lt;/li&gt;
&lt;li&gt;Handle memory management. If you need to process a lot of grid data (200-300+ MB a pop), keep in mind that you may fill up your RAM quite quickly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="things-it-should-be-able-to-do-in-time"&gt;
&lt;h2&gt;Things it should be able to do (in time)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have basic image flattening utility fuctions.&lt;/li&gt;
&lt;li&gt;Have unified header dictionaries between grid and scan files. The formats Nanonis saves grid and scan information in is quite different and up until now I have been to lazy to try to normalize it a bit.&lt;/li&gt;
&lt;li&gt;More gracefully handle incomplete/non-square data.&lt;/li&gt;
&lt;li&gt;Have docs? just to describe things in a minimal way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;In the continued theme of I don't know what I'm doing, I uploaded &lt;code&gt;nanonispy&lt;/code&gt; to &lt;a class="reference external" href="https://pypi.python.org/pypi/nanonispy/1.0.1"&gt;pypi&lt;/a&gt;, &lt;a class="reference external" href="https://anaconda.org/underchemist/nanonispy"&gt;conda&lt;/a&gt;, and of course &lt;a class="reference external" href="https://github.com/underchemist/nanonispy"&gt;github&lt;/a&gt;. So there several, I think all fairly easy ways of installing the program. The easiest, or at least in the sense of not presuming much of anything of your development environment, is with setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:underchemist/nanonispy.git
$ python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However most people will have one of pip or conda installed (if not both). This makes it even simpler and all that is required to download the source code and install it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install nanonispy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda install -c https://conda.anaconda.org/underchemist nanonispy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and you're good to go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;I tend to explore my data a bit in an ipython/jupyter console, which is sort of how I developed the code. However it's just as easy to start scripting away since the library is pretty small and only requires you to do one thing: Initialize!&lt;/p&gt;
&lt;p&gt;A typical script using for &lt;code&gt;nanonispy&lt;/code&gt; might start out like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nanonispy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nap&lt;/span&gt;  &lt;span class="c1"&gt;# what I found convenient, up to you&lt;/span&gt;

&lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/my/big/important/stm/data.3ds&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fname2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/my/less/important/stm/scan.sxm&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;scan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fname3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/spectroscopy/data.dat&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have 3 class objects initialized with all their data and header information avaible as class attributes! Analyze away.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Friedel oscillations on Ag(111)... yummy!&lt;/p&gt;
&lt;img alt="sailing the Fermi seas" class="align-center" src="/images/friedel-ag111.png" style="width: 100%;" /&gt;
&lt;/div&gt;
</content><category term="python"></category></entry></feed>